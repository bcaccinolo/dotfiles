""""""""""
" Colors "
""""""""""

syn on

if &term == "screen"
else
    " par defaut, on est en term supportant le 256 couleurs
    set t_Co=256
    "colorscheme desert256
    " Theme configurable et reposant
    " Select colormap: 'soft', 'softlight', 'standard' or 'allblue'
    let xterm16_colormap = 'allblue'
    " Select brightness: 'low', 'med', 'high', 'default' or custom levels.
    let xterm16_brightness = 'high'
    " Curseur vert => beurk
    let g:xterm16fg_Cursor = 'black'
    let g:xterm16bg_Cursor = 'white'
    " colorscheme xterm16
endif
" Pas de gras
set t_md=

""""""""""""""""""
" Terminal fixes "
""""""""""""""""""

if &term ==? "xterm"
  set t_Sb=^[4%dm
  set t_Sf=^[3%dm
  set ttymouse=xterm2
endif
if &term ==? "gnome" && has("eval")
  " Set useful keys that vim doesn't discover via termcap but are in the
  " builtin xterm termcap. We use exec to avoid having to
  " include raw escapes in the file.
  exec "set <C-Left>=\eO5D"
  exec "set <C-Right>=\eO5C"
endif

"""""""""""""""""""""""""""""""
" Shell (.sh) scripts as bash "
"""""""""""""""""""""""""""""""

if has("eval")
  let is_bash=1
endif

""""""""""""""""""""""""""""
" Some basic configuration "
""""""""""""""""""""""""""""

set nocompatible
set modeline
set history=50
set wildmenu
set wildignore+=*~,*.info,*.aux,*.log,*.dvi,*.bbl,*.out,*.o,*.lo
set suffixes+=~,.info,.aux,.log,.dvi,.bbl,.out,.o,.lo
set viminfo='20,\"500


""""""""""""""""""""""""""""
" When editing a file, always jump to the last cursor position
""""""""""""""""""""""""""""
autocmd BufReadPost *
    \ if ! exists("g:leave_my_cursor_position_alone") |
    \     if line("'\"") > 0 && line ("'\"") <= line("$") |
    \         exe "normal g'\"" |
    \     endif |
    \ endif


""""""""""""""""""
" Nice statusbar "
""""""""""""""""""

set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&encoding},                " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%=                           " right align
"set statusline+=0x%-8B\                      " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

""""""""""""""""""
" Search options "
""""""""""""""""""

set incsearch
set ignorecase
set infercase
set hlsearch
set showmatch

""""""""""""""""""""""""""""""""""""""""
" tabs / buffers shortcuts (vim7 only) "
""""""""""""""""""""""""""""""""""""""""

if v:version >= 700
    map  <A-Right> :bnext<CR>
    map  <A-Left>  :bprevious<CR>
    nmap <A-Right> :bnext<CR>
    nmap <A-Left>  :bprevious<CR>
    imap <A-Right> <ESC>:bnext<CR>a
    imap <A-Left>  <ESC>:bprevious<CR>a
endif

"""""""""""""""""""""""""""""""""""""""""""""
" spell checking and autocompletion (vim 7) "
"""""""""""""""""""""""""""""""""""""""""""""

if v:version >= 700
    "set spell
    set spelllang=fr,en
    set omnifunc=syntaxcomplete#Complete
    set completeopt=menuone,preview
    " tab completion
    if has("eval")
        function! CleverTab()
            let col = col('.') - 1
            if !col || getline('.')[col - 1] =~ '\s'
                return "\<Tab>"
            else
                return "\<C-x>\<C-o>"
            endif
        endfun
        inoremap <Tab> <C-R>=CleverTab()<CR>
        inoremap <S-Tab> <C-n>
    endif
endif


" Toggle remap pour le HTML ou JS
com! -nargs=1 ToggleEntities call <SID>ToggleEntities(<args>)
fun! s:ToggleEntities(type)
    " On definit les variables pour mémoriser l'état
    if !exists ("g:entities_loaded")
        let g:entities_loaded = "none"
    endif
    if a:type == "html"
        " On va (dé)charger du HTML
        if g:entities_loaded == "html"
            " Unload HTML
            let g:entities_loaded = "none"
            exe ":source ~/.vim/html_entite.iunmap"
            echo "HTML Entities unloaded"
        else
            if g:entities_loaded == "js"
                " JS déjà chargé, on le décharge
                exe ":source ~/.vim/js_entite.iunmap"
            endif
            let g:entities_loaded = "html"
            exe ":source ~/.vim/html_entite.imap"
            echo "HTML Entities loaded"
        endif
    elseif a:type == "js"
        " On va (dé)charger du JS
        if g:entities_loaded == "js"
            " Unload JS
            let g:entities_loaded = "none"
            exe ":source ~/.vim/js_entite.iunmap"
            echo "JS Entities unloaded"
        else
            if g:entities_loaded == "html"
                " HTML déjà chargé, on le décharge
                exe ":source ~/.vim/html_entite.iunmap"
            endif
            let g:entities_loaded = "js"
            exe ":source ~/.vim/js_entite.imap"
            echo "JS Entities loaded"
        endif
    endif
endfun
map <F12> :ToggleEntities "html"<CR>
imap <F12> <ESC>:ToggleEntities "html"<CR>a
map <F11> :ToggleEntities "js"<CR>
imap <F11> <ESC>:ToggleEntities "js"<CR>a

"""""""""""""""""""""
" Encoding settings "
"""""""""""""""""""""

" If we have a BOM, always honour that rather than trying to guess.
if &fileencodings !~? "ucs-bom"
  set fileencodings^=ucs-bom
endif
" Always check for UTF-8 when trying to determine encodings.
if &fileencodings !~? "utf-8"
  set fileencodings+=utf-8
endif
" Make sure we have a sane fallback for encoding detection
set fileencodings+=default


""""""""""""""""""""""
" graphical GUI conf "
""""""""""""""""""""""

if has("gui_running")
    if has("gui_gtk2")
        set guifont=Courier\ 10\ pitch\ 9
    elseif has("gui_kde")
        set guifont=Courier\ 10\ pitch/9/-1/5/50/0/0/0/1/0
    endif
    au VimEnter * set lines=60 columns=120
    " enleve la toolbar
    "set guioptions-=T
    " enleve le menu
    "set guioptions-=m
endif

""""""""""""""""""""""""""""""
" Tab and formatting options "
""""""""""""""""""""""""""""""

filetype on
filetype plugin on
filetype indent on
" le html, c'est en fait du xhtml
autocmd FileType html setlocal filetype=xhtml

set shiftwidth=2
set tabstop=2
" par defaut, en autocmd
autocmd FileType * set shiftwidth=2
autocmd FileType * set tabstop=2
set autoindent
set smartindent
set smarttab
set expandtab
set backspace=2
set ruler
set mouse=a
" Don't use Ex mode, use Q for formatting
map Q gq


""""""""""""""""""""""""""
" Some usefull  mappings "
""""""""""""""""""""""""""
map ,source :source ~/.vimrc<CR>
map ,vimrc :e ~/.vimrc<CR>
map bb :BufExplorer<CR>

map <F7> mzgg=G'z<CR>

map <C-o> :NERDTreeToggle<CR>
imap <C-e> <ESC>$a

map <C-w>k :bdelete<CR>

" surround for ruby
let g:surround_45 = "<% \r %>"  " surround with a '-'
let g:surround_61 = "<%= \r %>" " surround with a '='


"autocmd VimEnter * NERDTree
let NERDTreeMouseMode = 3

" FuzzyFinder bindings
map <C-f> :FufFile<CR>
map <C-b> :FufBuffer<CR>


