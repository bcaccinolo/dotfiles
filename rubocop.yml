
# Commonly used screens these days easily fit more than 80 characters.
Metrics/LineLength:
  Max: 120

# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 500

# Single quotes being faster is hardly measurable and only affects parse time.
# Enforcing double quotes reduces the times where you need to change them
# when introducing an interpolation. Use single quotes only if their semantics
# are needed.
# Style/StringLiterals:
#   EnforcedStyle: double_quotes

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# Public methods should always be documented
Style/DocumentationMethod:
  Enabled: true

# Multi-line method calls should use trailing dot
Layout/DotPosition:
  EnforcedStyle: trailing

# Classic indentation rather than indenting to caller
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# Enforce usage of alias_method over alias since it's more flexible and predictable
Style/Alias:
  EnforcedStyle: prefer_alias_method

# Enforce usage of %i() to create array of symbols
Style/SymbolArray:
  Enabled: true

# # Most readable form.
# Style/AlignHash:
#   EnforcedHashRocketStyle: table
#   EnforcedColonStyle: table

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# Use of consistent method names from the Enumerable module
Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    reduce: "inject"

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# Calling the argument `other` in all cases makes no sense.
# Naming/BinaryOperatorParameter:
#   Enabled: false